{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "S_dgg-EqQHE2"
   },
   "outputs": [],
   "source": [
    "import math\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "rBTdh0pHYzsc"
   },
   "outputs": [],
   "source": [
    "# Initialize empty load/moment arrays. These act as defaults—\n",
    "# specific loads override the empty arrays if provided.\n",
    "pointLoads = np.array([[]]) # [location,xMag, yMag]\n",
    "pointMoments = np.array([[]]) # [location, Mag]\n",
    "distributedLoads = np.array([[]]) # [location i, location f, Mag]\n",
    "linearLoads = np.array([[]]) # [location i, location f, startMag, endMag]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "5u59wEJyYMaL"
   },
   "outputs": [],
   "source": [
    "\n",
    "#inputs\n",
    "\n",
    "def get_positive_input(prompt):\n",
    "    while True:\n",
    "        user_input = input(prompt).strip()\n",
    "        if user_input == \"\":\n",
    "            print(\" Input cannot be empty. Try again.\")\n",
    "            continue\n",
    "        try:\n",
    "            val = float(user_input)\n",
    "            if val < 0:\n",
    "                print(\" Value cannot be negative. Try again.\")\n",
    "                continue\n",
    "            return val\n",
    "        except ValueError:\n",
    "            print(\" Invalid number. Please enter a valid numeric value.\")\n",
    "\n",
    "# User input for beam parameters\n",
    "span = get_positive_input(\"Enter the span of the beam in meters: \")\n",
    "A = get_positive_input(\"Enter the location of support A (smooth pin / hinge) in meters: \")\n",
    "B = get_positive_input(\"Enter the location of support B (roller/rocker) in meters: \")\n",
    "\n",
    "# Optional: Print confirmation\n",
    "print(f\"\\nBeam span = {span} m\")\n",
    "print(f\"Support A at = {A} m\")\n",
    "print(f\"Support B at = {B} m\")\n",
    "\n",
    "\n",
    "\n",
    "#force data\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "def parse_input(prompt, dims):\n",
    "    \"\"\"\n",
    "    Helper to take multiline input for loads.\n",
    "    dims = number of elements per row (e.g. 3 for [location, xMag, yMag])\n",
    "    \"\"\"\n",
    "    print(prompt)\n",
    "    print(f\"Enter values as space-separated per line ({dims} values per row), or leave empty and press Enter to skip.\")\n",
    "    print(\"Example: for {dims} values: {' '.join(['val'+str(i+1) for i in range(dims)])}\")\n",
    "    print(\"Type 'done' when finished.\\n\")\n",
    "\n",
    "    rows = []\n",
    "    while True:\n",
    "        line = input(\"> \").strip()\n",
    "        if line.lower() == \"done\":\n",
    "            break\n",
    "        if not line:\n",
    "            continue\n",
    "        try:\n",
    "            values = [float(x) for x in line.split()]\n",
    "            if len(values) != dims:\n",
    "                print(f\"⚠️ Please enter exactly {dims} values.\")\n",
    "                continue\n",
    "            rows.append(values)\n",
    "        except ValueError:\n",
    "            print(\"⚠️ Invalid number format. Try again.\")\n",
    "\n",
    "    if not rows:\n",
    "        return np.zeros((1, dims))  # <-- THIS is the safe placeholder\n",
    "    else:\n",
    "        return np.array(rows)\n",
    "\n",
    "\n",
    "# USER INPUT SECTION\n",
    "pointLoads = parse_input(\"Enter Point Loads [location, xMag, yMag]:\", 3)\n",
    "pointMoments = parse_input(\"Enter Point Moments [location, Mag]:\", 2)\n",
    "distributedLoads = parse_input(\"Enter Distributed Loads [location i, location f, Mag]:\", 3)\n",
    "linearLoads = parse_input(\"Enter Linear Loads [location i, location f, startMag, endMag]:\", 4)\n",
    "\n",
    "print(\"\\n--- Summary of Entered Loads ---\")\n",
    "print(\"Point Loads:\\n\", pointLoads)\n",
    "print(\"Point Moments:\\n\", pointMoments)\n",
    "print(\"Distributed Loads:\\n\", distributedLoads)\n",
    "print(\"Linear Loads:\\n\", linearLoads)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "rnBfCMI8ZELw"
   },
   "outputs": [],
   "source": [
    "#Defaults\n",
    "\n",
    "divs = 10000 #Divide the span up into this number of data points\n",
    "delta = span/divs # Distance between data points\n",
    "X = np.arange(0, span+delta, delta) # range of X-coordinates\n",
    "nPL = len(pointLoads[0]) # test for pointLoads\n",
    "nPM = len(pointMoments[0]) #test for pointMoments \n",
    "nUDL = len(distributedLoads[0]) #test for UDL (Uniformly Distributed Loads) \n",
    "nLDL = len(linearLoads[0]) #test for LDL (Linearly Distributed Loads)\n",
    "\n",
    "\n",
    "reactions = np.array([0.0, 0 , 0]) # for (Va, Ha, Vb)\n",
    "shearForce = np.empty([0,len(X)]) # Shear forces at each data point\n",
    "bendingMoment = np.empty([0,len(X)]) #Bending moment at each data point"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "S1AD5hwmj9E2"
   },
   "source": [
    "Function to calculate reactions due to point loads"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "MVueQFU7kEuf"
   },
   "outputs": [],
   "source": [
    "def reactions_PL(n):\n",
    "  xp = pointLoads[n, 0] # location of point load\n",
    "  fx =pointLoads[n, 1]  # point load horizontal component Mag\n",
    "  fy =pointLoads[n, 2]   # point load vertical component Mag\n",
    "\n",
    "  la_p = A - xp #Lever arm of point load about point A\n",
    "  mp = fy*la_p  #Moment generated by point load about A ( CW moments are positive )\n",
    "  la_vb = B-A #Lever arm of evrtical reaction at B about point A \n",
    "\n",
    "  Vb = mp/la_vb #Vertical reaction at B\n",
    "  Va = -fy-Vb #Vertical reaction at A\n",
    "  Ha = -fx  #Horizontal reaction at A\n",
    "\n",
    "  return Va, Vb, Ha\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Function to calculate reactions due to point Moments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def reactions_PM(n):\n",
    "    xm = pointMoments[n,0] #Location of point moment\n",
    "    m = pointMoments[n,1] #Point moment magnitude\n",
    "    la_vb = B-A #Lever arm of vertical reaction at B about point A\n",
    "\n",
    "    Vb = m/la_vb #Vertical reaction at B\n",
    "    Va = -Vb #Vertical reaction at A\n",
    "\n",
    "    return Va, Vb"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Function to calculate reactions due to UDLS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def reactions_UDL(n):\n",
    "    xStart = distributedLoads[n,0]\n",
    "    xEnd = distributedLoads[n,1]\n",
    "    fy = distributedLoads[n,2]\n",
    "\n",
    "    fy_Res = fy*(xEnd-xStart)\n",
    "    x_Res = xStart + 0.5*(xEnd-xStart)\n",
    "\n",
    "    la_p = A - x_Res #Lever arm of resultant point load about point A\n",
    "    mp = fy_Res*la_p #Moment generated by resultant point load about A (CW moments are positive)\n",
    "    la_vb = B-A #Lever arm of vertical reaction at B about point A\n",
    "\n",
    "    Vb = mp/la_vb  #Vertical reaction at B\n",
    "    Va = -fy_Res-Vb  #Vertical reaction at A\n",
    "\n",
    "    return Va, Vb\n",
    "\n",
    "\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Function to calculate reactions due to LDLs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def reactions_LDL(n):\n",
    "    xStart = linearLoads[n,0]\n",
    "    xEnd = linearLoads[n,1]\n",
    "    fy_start = linearLoads[n,2]\n",
    "    fy_end = linearLoads[n,3]\n",
    "    \n",
    " #Determine the location and the magnitude of force resultant\n",
    "    if abs(fy_start)>0:\n",
    "        fy_Res = 0.5*fy_start*(xEnd-xStart)\n",
    "        x_Res = xStart + (1/3)*(xEnd-xStart)\n",
    "    else:\n",
    "        fy_Res = 0.5*fy_end*(xEnd-xStart)\n",
    "        x_Res = xStart + (2/3)*(xEnd-xStart)\n",
    "\n",
    "    la_p = A - x_Res  #Lever arm of resultant point laod about point A\n",
    "    mp = fy_Res*la_p  #Moment generated by resultant point load about A (CW moments are positive)\n",
    "    la_vb = B-A  #Lever arm of vertical reaction at B aboud point A\n",
    "\n",
    "    Vb = mp/la_vb  #Vertical reaction at B\n",
    "    Va = -fy_Res-Vb  #Vertical reaction at A\n",
    "\n",
    "    return Va, Vb\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "gWImTuoThuQE"
   },
   "source": [
    "Cycle through all point loads and determine reactions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "2WUWCjE3hw4f"
   },
   "outputs": [],
   "source": [
    "PL_record = np.empty([0,3])\n",
    "if (nPL>0):\n",
    "\n",
    "    for n, p in enumerate(pointLoads):\n",
    "      va, vb, ha = reactions_PL(n) #Calculate reactions\n",
    "      PL_record = np.append(PL_record, [np.array([va, ha, vb])], axis=0) #Storing reactions for each point load\n",
    "\n",
    "      #Add reactions to record\n",
    "      reactions[0] = reactions[0] + va\n",
    "      reactions[1] = reactions[1] + ha\n",
    "      reactions[2] = reactions[2] + vb\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cycle through all point moments and determine reactions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "PM_record = np.empty([0,2])\n",
    "if (nPM>0):\n",
    "\n",
    "    for n, p in enumerate(pointMoments):\n",
    "        va, vb = reactions_PM(n)\n",
    "        PM_record = np.append(PM_record, [np.array([va, vb])], axis=0) #Storing reactions for each point moment\n",
    "\n",
    "        #Add reactions to record\n",
    "        reactions[0] = reactions[0] + va\n",
    "        reactions[2] = reactions[2] + vb\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cycle through all UDLs and determine reactions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "UDL_record = np.empty([0,2])\n",
    "if (nUDL>0):\n",
    "\n",
    "    for n, p in enumerate(distributedLoads):\n",
    "        va, vb = reactions_UDL(n)\n",
    "        UDL_record = np.append(UDL_record, [np.array([va, vb])], axis=0) #Storing reactions for each UDL\n",
    "        #Add reactions to record\n",
    "        reactions[0] = reactions[0] + va\n",
    "        reactions[2] = reactions[2] + vb"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cycle through all LDLs and determine reactions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "LDL_record = np.empty([0,2])\n",
    "if (nLDL>0):\n",
    "\n",
    "    for n, p in enumerate(linearLoads):\n",
    "        va, vb = reactions_LDL(n)\n",
    "        LDL_record = np.append(LDL_record, [np.array([va, vb])], axis=0) #Storing reactions for each LDL\n",
    "        #Add reactions to record\n",
    "        reactions[0] = reactions[0] + va\n",
    "        reactions[2] = reactions[2] + vb"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "yOCwz5lgsJs3"
   },
   "source": [
    "Cycle through all point loads and determine shear and moment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "5OFs3qpotXeU"
   },
   "outputs": [],
   "source": [
    "def shear_moment_PL(n):\n",
    "  xp = pointLoads[n, 0] # location of point load\n",
    "  fy =pointLoads[n, 2]   # Point load vertical componen Mag\n",
    "  Va = PL_record[n,0]  # Vertical reaction at A for this point load\n",
    "  Vb = PL_record[n,2]  # Vertical reaction at B for this point load\n",
    "\n",
    "    # Cycle through the structure and calculate the shear force and bending moment at each point\n",
    "  Shear = np.zeros(len(X))  #Initialise a container to hold all shear force data for this point load\n",
    "  Moment = np.zeros(len(X)) #Initialise a container to hold all shear force data for this point load\n",
    "\n",
    "  for i, x in enumerate(X):\n",
    "    shear = 0  #Initialise the shear force for this data point\n",
    "    moment = 0  #Initialise the bending moment for this data point\n",
    "\n",
    "    if x>A:        # calculate the shear and moment due to reaction at A\n",
    "      shear = shear + Va\n",
    "      moment = moment - Va*(x-A)\n",
    "\n",
    "    if x>B:  # calculate the shear and moment due to reaction at B\n",
    "      shear = shear + Vb\n",
    "      moment = moment - Vb*(x-B)\n",
    "\n",
    "    if x>xp:   # calculate the shear and moment due to point load\n",
    "      shear = shear + fy\n",
    "      moment = moment - fy*(x-xp)\n",
    "        \n",
    "    # Store shear and moment for this location      \n",
    "    Shear[i] = shear\n",
    "    Moment[i] = moment\n",
    "\n",
    "  return Shear, Moment\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define function to calculate shear forces and bending moments due to point moments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def shear_moment_PM(n):\n",
    "    xm = pointMoments[n,0] #location of point moment\n",
    "    m = pointMoments[n,1] # point moment magnitude\n",
    "    Va = PM_record[n,0] # vertical reaction at A for this point moment\n",
    "    Vb = PM_record[n,1]  # # vertical reaction at B for this point moment\n",
    "\n",
    "     # Cycle through the structure and calculate the shear force and bending moment at each point\n",
    "    Shear = np.zeros(len(X))  #Initialise a container to hold all shear force data for this point load\n",
    "    Moment = np.zeros(len(X)) #Initialise a container to hold all shear force data for this point load\n",
    "\n",
    "    for i, x in enumerate(X):\n",
    "        shear = 0  #Initialise the shear force for this data point\n",
    "        moment = 0  #Initialise the bending moment for this data point\n",
    "\n",
    "        if x>A:        # calculate the shear and moment due to reaction at A\n",
    "          shear = shear + Va\n",
    "          moment = moment - Va*(x-A)\n",
    "\n",
    "        if x>B:  # calculate the shear and moment due to reaction at B\n",
    "          shear = shear + Vb\n",
    "          moment = moment - Vb*(x-B)\n",
    "\n",
    "        if x>xm:   # calculate the moment influence of point moment ( No impact on the shear ) \n",
    "          moment = moment - m\n",
    "            \n",
    "         # Store shear and moment for this location       \n",
    "        Shear[i] = shear\n",
    "        Moment[i] = moment\n",
    "\n",
    "    return Shear, Moment\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Define function to calculate shear forces and bending moments due to UDLs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def shear_moment_UDL(n):\n",
    "    xStart = distributedLoads[n,0] \n",
    "    xEnd = distributedLoads[n,1]\n",
    "    fy = distributedLoads[n,2]\n",
    "    Va = UDL_record[n,0]  # Vertical reaction at A for this UDL\n",
    "    Vb = UDL_record[n,1]  # Vertical reaction at B for this UDL\n",
    "\n",
    "    # Cycle through the structure and calculate the shear force and bending moment at each point\n",
    "    Shear = np.zeros(len(X))  #Initialise a container to hold all shear force data for this point load\n",
    "    Moment = np.zeros(len(X)) #Initialise a container to hold all shear force data for this point load\n",
    "\n",
    "    for i, x in enumerate(X):\n",
    "        shear = 0  #Initialise the shear force for this data point\n",
    "        moment = 0  #Initialise the bending moment for this data point\n",
    "\n",
    "        if x>A:        # calculate the shear and moment due to reaction at A\n",
    "          shear = shear + Va\n",
    "          moment = moment - Va*(x-A)\n",
    "\n",
    "        if x>B:  # calculate the shear and moment due to reaction at B\n",
    "          shear = shear + Vb\n",
    "          moment = moment - Vb*(x-B)\n",
    "\n",
    "        if x>xStart and x<=xEnd :   # calculate the shear and moment due to point load\n",
    "          shear = shear + fy*(x-xStart)\n",
    "          moment = moment - fy*(x-xStart)*0.5*(x-xStart)\n",
    "        elif (x>xEnd):\n",
    "            shear = shear + fy*(xEnd-xStart)\n",
    "            moment = moment - fy*(xEnd-xStart)*(x-xStart-0.5*(xEnd - xStart))\n",
    "            \n",
    "         # Store shear and moment for this location       \n",
    "        Shear[i] = shear\n",
    "        Moment[i] = moment\n",
    "\n",
    "    return Shear, Moment\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Define function to calculate shear forces and bending moments due to LDLs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def shear_moment_LDL(n):\n",
    "    xStart = linearLoads[n,0]\n",
    "    xEnd = linearLoads[n,1]\n",
    "    fy_start = linearLoads[n,2]\n",
    "    fy_end = linearLoads[n,3]\n",
    "    Va = LDL_record[n,0]  # Vertical reaction at A for this LDL\n",
    "    Vb = LDL_record[n,1]  # Vertical reaction at B for this LDL\n",
    "\n",
    "    # Cycle through the structure and calculate the shear force and bending moment at each point\n",
    "    Shear = np.zeros(len(X))  #Initialise a container to hold all shear force data for this point load\n",
    "    Moment = np.zeros(len(X)) #Initialise a container to hold all shear force data for this point load\n",
    "\n",
    "    for i, x in enumerate(X):\n",
    "        shear = 0  #Initialise the shear force for this data point\n",
    "        moment = 0  #Initialise the bending moment for this data point\n",
    "\n",
    "\n",
    "        if x>A:        # calculate the shear and moment due to reaction at A\n",
    "          shear = shear + Va\n",
    "          moment = moment - Va*(x-A)\n",
    "\n",
    "        if x>B:  # calculate the shear and moment due to reaction at B\n",
    "          shear = shear + Vb\n",
    "          moment = moment - Vb*(x-B)\n",
    "\n",
    "        if x>xStart and x<xEnd:\n",
    "            if abs(fy_start)>0:\n",
    "                x_base = x-xStart # base of the triangular load distribution \n",
    "                f_cut = fy_start - x_base*(fy_start/(xEnd-xStart)) # Mag of LDL at cut\n",
    "                R1 = 0.5*x_base*(fy_start-f_cut)  # Mag of resultant for triangular portion of load\n",
    "                R2 = x_base*f_cut # Mag of resultant for constant portion of load\n",
    "                shear = shear +R1 +R2\n",
    "                moment = moment - R1*(2/3)*x_base - R2*(x_base/2)\n",
    "                \n",
    "            else:\n",
    "                x_base = x-xStart\n",
    "                f_cut = fy_end *(x_base/(xEnd-xStart))\n",
    "                R = 0.5*x_base*f_cut\n",
    "                shear = shear + R\n",
    "                moment = moment -R*(x_base/3)\n",
    "                \n",
    "        elif x>xEnd:\n",
    "            if abs(fy_start)<0:\n",
    "                R = 0.5*fy_star * (xEnd-xStart)\n",
    "                xr = xStart + (1/3)*(xEnd - xStart)\n",
    "                shear = shear + R\n",
    "                moment = moment - R*(x-xr)\n",
    "                \n",
    "            else:\n",
    "                R = 0.5*fy_end*(xEnd - xStart)\n",
    "                xr = xStart + (2/3)*(xEnd - xStart)\n",
    "                shear = shear + R\n",
    "                moment = moment - R*(x-xr)\n",
    "         # Store shear and moment for this location       \n",
    "        Shear[i] = shear\n",
    "        Moment[i] = moment\n",
    "\n",
    "    return Shear, Moment    \n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cycle through all point loads and determine shear and moment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Dulb1suAsSh-"
   },
   "outputs": [],
   "source": [
    "if(nPL>0):\n",
    "      for n, p in enumerate(pointLoads):\n",
    "        Shear, Moment =  shear_moment_PL(n)\n",
    "        shearForce = np.append(shearForce, [Shear], axis = 0) # Store shear force for each point load\n",
    "        bendingMoment = np.append(bendingMoment, [Moment], axis = 0) # Store bending moment for each point load\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cycle through all point moments and determine shear and moment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if(nPM>0):\n",
    "    for n, p in enumerate(pointMoments):\n",
    "        Shear, Moment = shear_moment_PM(n)\n",
    "        shearForce = np.append(shearForce, [Shear], axis = 0) # Store shear force for each point moment\n",
    "        bendingMoment = np.append(bendingMoment, [Moment], axis = 0) # Store bending moment for each point moment\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cycle through all UDLs and determine shear and moment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if(nUDL>0):\n",
    "    for n, p in enumerate(distributedLoads):\n",
    "        Shear, Moment = shear_moment_UDL(n)\n",
    "        shearForce = np.append(shearForce, [Shear], axis = 0) # Store shear force for each UDL\n",
    "        bendingMoment = np.append(bendingMoment, [Moment], axis = 0) # Store bending moment for each UDL\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cycle through all LDLs and determine shear and moment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if(nLDL>0):\n",
    "    for n, p in enumerate(linearLoads):\n",
    "        Shear, Moment = shear_moment_LDL(n)\n",
    "        shearForce = np.append(shearForce, [Shear], axis = 0) # Store shear force for each LDL\n",
    "        bendingMoment = np.append(bendingMoment, [Moment], axis = 0) # Store bending moment for each LDL\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vAuK4n9mlyVl"
   },
   "source": [
    "Printing and Plotting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "_OsWLyZDl2yx",
    "outputId": "b757f9d4-6fc2-4491-cd5c-e9b1439018bf"
   },
   "outputs": [],
   "source": [
    "print('The vertical reaction at A (Va) is',reactions[0], 'kN')\n",
    "print('The horizontal reaction at A (Ha) is',reactions[1], 'kN')\n",
    "print('The vertical reaction at B (Vb) is',reactions[2], 'kN')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "HyK7mURonBn-"
   },
   "outputs": [],
   "source": [
    "#print('The vertical reaction at A (Va) is {one} kN'. format(one=round(reactions[0],2))) # for rounding"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ZmgfMVH00VUx"
   },
   "source": [
    "Plotly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "id": "mv42i-xyzxmW",
    "outputId": "06998b49-578a-4b27-a823-fbe1eb2c6400"
   },
   "outputs": [],
   "source": [
    "!pip install plotly\n",
    "import plotly as py\n",
    "import plotly.graph_objs as gob\n",
    "\n",
    "py.offline.init_notebook_mode(connected=True) # setup offline plotting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "vnQrMQuC0Ubx",
    "outputId": "04019612-83d3-4350-d304-540eb9c13bb4"
   },
   "outputs": [],
   "source": [
    "# Define layout object\n",
    "layout = gob.Layout(title={'text': 'Shear Force Diagram', 'y':0.80, 'x':0.5, 'xanchor':'center', 'yanchor':'top'},\n",
    "yaxis = dict(title ='Shear Force (kN)'),\n",
    "xaxis = dict(title = 'Distance (m)', range = [-1, span+1]),\n",
    "showlegend = False,)\n",
    "\n",
    "line = gob.Scatter(x = X,\n",
    "                  y = sum(shearForce),\n",
    "                  mode = 'lines',\n",
    "                  name = 'Shear Force',\n",
    "                    fill = 'tonexty',\n",
    "                  line_color = 'blue',\n",
    "                  fillcolor = 'rgba(0,0,255,0.3)')\n",
    "\n",
    "axis = gob.Scatter(\n",
    "    x =[0, span],\n",
    "    y = [0,0],\n",
    "    mode = 'lines',\n",
    "    line_color = 'black'\n",
    ") \n",
    "\n",
    "fig = gob.Figure(data =[line,axis], layout=layout)\n",
    "\n",
    "py.offline.iplot(fig)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define layout object\n",
    "layout = gob.Layout(title={'text': 'Bending Moment Diagram', 'y':0.80, 'x':0.5, 'xanchor':'center', 'yanchor':'top'},\n",
    "yaxis = dict(title ='Bending Moment (kNm)', autorange = 'reversed'),\n",
    "xaxis = dict(title = 'Distance (m)', range = [-1, span+1]),\n",
    "showlegend = False,)\n",
    "\n",
    "line = gob.Scatter(x = X,\n",
    "                  y = -sum(bendingMoment),\n",
    "                  mode = 'lines',\n",
    "                  name = 'Bending Moment',\n",
    "                    fill = 'tonexty',\n",
    "                  line_color = 'green',\n",
    "                  fillcolor = 'rgba(0,255,0,0.3)')\n",
    "\n",
    "axis = gob.Scatter(x =[0, span],\n",
    "    y = [0,0],\n",
    "    mode = 'lines',\n",
    "    line_color = 'black'\n",
    ") \n",
    "\n",
    "fig = gob.Figure(data =[line,axis], layout=layout)\n",
    "\n",
    "py.offline.iplot(fig)\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
